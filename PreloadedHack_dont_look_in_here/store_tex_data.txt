//////////////////////////////////////
around line 59 with the other includes insert
#include <fstream>
#include <iostream>

add these somewhwere in between functions around
line 11307

///////////////////////////////////////////

std::ostream& operator<<(std::ostream& os, const memory_word& wd)
{
	os << wd.union_t.an_int;
	return os;
}

std::ostream& operator<<(std::ostream& os, const list_state_record& ls)
{
	os << "list_state_record{" << "(mode_type)" << (int)ls.mode_field << "," << ls.head_field << "," << ls.tail_field << "," <<
		ls.pg_field << "," << ls.ml_field << "," << ls.aux_field << "}";
	return os;
}

std::ostream& operator<<(std::ostream& os, const in_state_record& is)
{
	os << "in_state_record{" << "(input_state_var)" << is.state_field << "," << "(enum_token_type)" << is.index_field << "," << is.start_field << "," <<
		is.loc_field << "," << is.limit_field << "," << is.name_field << "}";
	return os;
}

std::ostream& operator<<(std::ostream& os, const two_halves& hh)
{
	os << "two_halves{" << hh.rh << "," << hh.union_t.lh << "}";
	return os;
}

std::ostream& operator<<(std::ostream& os, const four_quarters& qqqq)
{
	os << "four_quarters{" << (int)qqqq.b0 << "," << (int)qqqq.b1 << "," << (int)qqqq.b2 << "," << (int)qqqq.b3 << "}";
	return os;
}

std::ostream& operator<<(std::ostream& os, const unsigned char& uc)
{
	os << (int)uc;
	return os;
}

std::ostream& operator<<(std::ostream& os, const char& uc)
{
	os << (int)uc;
	return os;
}

template <typename T>
void write_array(T & ary, std::string sname, std::ofstream& oss)
{
	oss << "s/^\\([^/#]*[[:blank:]]" << sname << "\\);[^\\]/\\1 = {\\\n";
	int count = 0;
	for (int i = ary._minindex; i <= ary._maxindex; i++) {
		if (count != 0)
			oss << ",";
		if (i % 10 == 0 && i != 0)
			oss << "\\\n";
		oss << ary[i];
		count++;
	}
	oss << "\\\n};/\n";
}


void write_var(std::string sname, int val, std::ofstream& oss)
{
	if (sname == "cur_group") {
		oss << "s/^\\([^/#]*[[:blank:]]" << sname << "\\);[^\\]/\\1 = " << "(group_code)" << val << ";/\n";
	}
	else {
		oss << "s/^\\([^/#]*[[:blank:]]" << sname << "\\);[^\\]/\\1 = " << val << ";/\n";
	}
}

void write_var(std::string sname, in_state_record val, std::ofstream& oss)
{
	oss << "s/^\\([^/#]*[[:blank:]]" << sname << "\\);[^\\]/\\1 = " << val << ";/\n";
}

void write_var(std::string sname, list_state_record val, std::ofstream& oss)
{
	oss << "s/^\\([^/#]*[[:blank:]]" << sname << "\\);[^\\]/\\1 = " << val << ";/\n";
}

void write_var(std::string sname, four_quarters val, std::ofstream& oss)
{
	oss << "s/^\\([^/#]*[[:blank:]]" << sname << "\\);[^\\]/\\1 = " << val << ";/\n";
}

void write_var(std::string sname, two_halves val, std::ofstream& oss)
{
	oss << "s/^\\([^/#]*[[:blank:]]" << sname << "\\);[^\\]/\\1 = " << val << ";/\n";
}


void store_tex_data()
{
	// here we dump out all tex data in sed format which can then be merged into the source file
	// in order to get a preloaded version of some format

	std::ofstream ofs("texdata.sh");
	if (!ofs) {
		std::cerr << "Error opening texdata.sh\n";
		exit(1);
	}
	ofs << "#!/bin/sed -f\n";

	write_array(xord, "xord", ofs);
	write_array(xchr, "xchr", ofs);
	write_array(str_pool, "str_pool", ofs);
	write_array(str_start, "str_start", ofs);
	write_array(trick_buf, "trick_buf", ofs);
	write_array(help_line, "help_line", ofs);
	write_array(buffer, "buffer", ofs);
	write_array(mem, "mem", ofs);
	write_array(nest, "nest", ofs);
	write_array(hash, "hash", ofs);
	write_array(save_stack, "save_stack", ofs);
	write_array(input_stack, "input_stack", ofs);
	write_array(line_stack, "line_stack", ofs);
	write_array(param_stack, "param_stack", ofs);
	write_array(cur_mark, "cur_mark", ofs);
	write_array(pstack, "pstack", ofs);
	write_array(read_open, "read_open", ofs);
	write_array(font_info, "font_info", ofs);
	write_array(font_check, "font_check", ofs);
	write_array(font_size, "font_size", ofs);
	write_array(font_dsize, "font_dsize", ofs);
	write_array(font_params, "font_params", ofs);
	write_array(font_name, "font_name", ofs);
	write_array(font_area, "font_area", ofs);
	write_array(font_bc, "font_bc", ofs);
	write_array(font_ec, "font_ec", ofs);
	write_array(font_glue, "font_glue", ofs);
	write_array(font_used, "font_used", ofs);
	write_array(hyphen_char, "hyphen_char", ofs);
	write_array(skew_char, "skew_char", ofs);
	write_array(bchar_label, "bchar_label", ofs);
	write_array(font_bchar, "font_bchar", ofs);
	write_array(font_false_bchar, "font_false_bchar", ofs);
	write_array(char_base, "char_base", ofs);
	write_array(width_base, "width_base", ofs);
	write_array(height_base, "height_base", ofs);
	write_array(depth_base, "depth_base", ofs);
	write_array(italic_base, "italic_base", ofs);
	write_array(lig_kern_base, "lig_kern_base", ofs);
	write_array(kern_base, "kern_base", ofs);
	write_array(exten_base, "exten_base", ofs);
	write_array(param_base, "param_base", ofs);
	write_array(eqtb, "eqtb", ofs);
	write_array(xeq_level, "xeq_level", ofs);
	write_array(TEX_format_default, "TEX_format_default", ofs);
	write_array(dvi_buf, "dvi_buf", ofs);
	write_array(total_stretch, "total_stretch", ofs);
	write_array(total_shrink, "total_shrink", ofs);
	write_array(active_width, "active_width", ofs);
	write_array(cur_active_width, "cur_active_width", ofs);
	write_array(background, "background", ofs);
	write_array(break_width, "break_width", ofs);
	write_array(minimal_demerits, "minimal_demerits", ofs);
	write_array(best_place, "best_place", ofs);
	write_array(best_pl_line, "best_pl_line", ofs);
	write_array(hc, "hc", ofs);
	write_array(hu, "hu", ofs);
	write_array(hyf, "hyf", ofs);
	write_array(trie, "trie", ofs);
	write_array(hyf_distance, "hyf_distance", ofs);
	write_array(hyf_num, "hyf_num", ofs);
	write_array(hyf_next, "hyf_next", ofs);
	write_array(op_start, "op_start", ofs);
	write_array(hyph_word, "hyph_word", ofs);
	write_array(hyph_list, "hyph_list", ofs);
#ifndef NO_INIT
	write_array(trie_op_hash, "trie_op_hash", ofs);
	write_array(trie_used, "trie_used", ofs);
	write_array(trie_op_lang, "trie_op_lang", ofs);
	write_array(trie_op_val, "trie_op_val", ofs);
	write_array(trie_c, "trie_c", ofs);
	write_array(trie_o, "trie_o", ofs);
	write_array(trie_l, "trie_l", ofs);
	write_array(trie_r, "trie_r", ofs);
	write_array(trie_hash, "trie_hash", ofs);
	write_array(trie_taken, "trie_taken", ofs);
	write_array(trie_min, "trie_min", ofs);
#endif
	write_array(page_so_far, "page_so_far", ofs);
	write_array(write_open, "write_open", ofs);
	write_array(name_of_file, "name_of_file", ofs);
	write_var("cur_align", cur_align, ofs);
	write_var("cur_span", cur_span, ofs);
	write_var("cur_loop", cur_loop, ofs);
	write_var("align_ptr", align_ptr, ofs);
	write_var("cur_head", cur_head, ofs);
	write_var("cur_tail", lo_mem_max, ofs);
	write_var("lo_mem_max", lo_mem_max, ofs);
	write_var("hi_mem_min", hi_mem_min, ofs);
	write_var("bad", bad, ofs);
	write_var("pool_ptr", pool_ptr, ofs);
	write_var("str_ptr", str_ptr, ofs);
	write_var("init_pool_ptr", init_pool_ptr, ofs);
	write_var("init_str_ptr", init_str_ptr, ofs);
	write_var("selector", selector, ofs);
	write_var("tally", tally, ofs);
	write_var("term_offset", term_offset, ofs);
	write_var("file_offset", file_offset, ofs);
	write_var("trick_count", trick_count, ofs);
	write_var("first_count", first_count, ofs);
	write_var("interaction", interaction, ofs);
	write_var("deletions_allowed", deletions_allowed, ofs);
	write_var("set_box_allowed", set_box_allowed, ofs);
	write_var("history", history, ofs);
	write_var("error_count", error_count, ofs);
	write_var("help_ptr", help_ptr, ofs);
	write_var("use_err_help", use_err_help, ofs);
	write_var("interrupt", interrupt, ofs);
	write_var("OK_to_interrupt", OK_to_interrupt, ofs);
	write_var("name_length", name_length, ofs);
	write_var("first", first, ofs);
	write_var("last", last, ofs);
	write_var("max_buf_stack", max_buf_stack, ofs);
	write_var("arith_error", arith_error, ofs);
	write_var("_remainder", _remainder, ofs);
	write_var("temp_ptr", temp_ptr, ofs);
	write_var("var_used", var_used, ofs);
	write_var("dyn_used", dyn_used, ofs);
	write_var("avail", avail, ofs);
	write_var("mem_end", mem_end, ofs);
	write_var("rover", rover, ofs);
	write_var("font_in_short_display", font_in_short_display, ofs);
	write_var("depth_threshold", depth_threshold, ofs);
	write_var("breadth_max", breadth_max, ofs);
	write_var("nest_ptr", nest_ptr, ofs);
	write_var("max_nest_stack", max_nest_stack, ofs);
	write_var("cur_list", cur_list, ofs);
	write_var("shown_mode", shown_mode, ofs);
	write_var("old_setting", old_setting, ofs);
	write_var("hash_used", hash_used, ofs);
	write_var("no_new_control_sequence", no_new_control_sequence, ofs);
	write_var("cs_count", cs_count, ofs);
	write_var("save_ptr", save_ptr, ofs);
	write_var("max_save_stack", max_save_stack, ofs);
	write_var("cur_level", cur_level, ofs);
	write_var("cur_group", cur_group, ofs);
	write_var("cur_boundary", cur_boundary, ofs);
	write_var("mag_set", mag_set, ofs);
	write_var("cur_cmd", cur_cmd, ofs);
	write_var("cur_chr", cur_chr, ofs);
	write_var("cur_cs", cur_cs, ofs);
	write_var("cur_tok", cur_tok, ofs);
	write_var("input_ptr", input_ptr, ofs);
	write_var("max_in_stack", max_in_stack, ofs);
	write_var("cur_input", cur_input, ofs);
	write_var("in_open", in_open, ofs);
	write_var("open_parens", open_parens, ofs);
	write_var("line", line, ofs);
	write_var("scanner_status", scanner_status, ofs);
	write_var("warning_index", warning_index, ofs);
	write_var("def_ref", def_ref, ofs);
	write_var("param_ptr", param_ptr, ofs);
	write_var("max_param_stack", max_param_stack, ofs);
	write_var("align_state", align_state, ofs);
	write_var("base_ptr", base_ptr, ofs);
	write_var("par_loc", par_loc, ofs);
	write_var("par_token", par_token, ofs);
	write_var("force_eof", force_eof, ofs);
	write_var("long_state", long_state, ofs);
	write_var("cur_val", cur_val, ofs);
	write_var("cur_val_level", cur_val_level, ofs);
	write_var("radix", radix, ofs);
	write_var("cur_order", cur_order, ofs);
	write_var("cond_ptr", cond_ptr, ofs);
	write_var("if_limit", if_limit, ofs);
	write_var("cur_if", cur_if, ofs);
	write_var("if_line", if_line, ofs);
	write_var("skip_line", skip_line, ofs);
	write_var("cur_name", cur_name, ofs);
	write_var("cur_area", cur_area, ofs);
	write_var("cur_ext", cur_ext, ofs);
	write_var("area_delimiter", area_delimiter, ofs);
	write_var("ext_delimiter", ext_delimiter, ofs);
	write_var("name_in_progress", name_in_progress, ofs);
	write_var("job_name", job_name, ofs);
	write_var("log_opened", log_opened, ofs);
	write_var("output_file_name", output_file_name, ofs);
	write_var("log_name", log_name, ofs);
	write_var("fmem_ptr", fmem_ptr, ofs);
	write_var("font_ptr", font_ptr, ofs);
	write_var("null_character", null_character, ofs);
	write_var("total_pages", total_pages, ofs);
	write_var("max_v", max_v, ofs);
	write_var("max_h", max_h, ofs);
	write_var("max_push", max_push, ofs);
	write_var("last_bop", last_bop, ofs);
	write_var("dead_cycles", dead_cycles, ofs);
	write_var("doing_leaders", doing_leaders, ofs);
	write_var("c", c, ofs);
	write_var("f", f, ofs);
	write_var("rule_ht", rule_ht, ofs);
	write_var("rule_dp", rule_dp, ofs);
	write_var("rule_wd", rule_wd, ofs);
	write_var("g", g, ofs);
	write_var("lq", lq, ofs);
	write_var("lr", lr, ofs);
	write_var("half_buf", half_buf, ofs);
	write_var("dvi_limit", dvi_limit, ofs);
	write_var("dvi_ptr", dvi_ptr, ofs);
	write_var("dvi_offset", dvi_offset, ofs);
	write_var("dvi_gone", dvi_gone, ofs);
	write_var("down_ptr", down_ptr, ofs);
	write_var("right_ptr", right_ptr, ofs);
	write_var("dvi_h", dvi_h, ofs);
	write_var("dvi_v", dvi_v, ofs);
	write_var("cur_h", cur_h, ofs);
	write_var("cur_v", cur_v, ofs);
	write_var("dvi_f", dvi_f, ofs);
	write_var("cur_s", cur_s, ofs);
	write_var("last_badness", last_badness, ofs);
	write_var("adjust_tail", adjust_tail, ofs);
	write_var("pack_begin_line", pack_begin_line, ofs);
	write_var("empty_field", empty_field, ofs);
	write_var("null_delimiter", null_delimiter, ofs);
	write_var("cur_mlist", cur_mlist, ofs);
	write_var("cur_style", cur_style, ofs);
	write_var("cur_size", cur_size, ofs);
	write_var("cur_mu", cur_mu, ofs);
	write_var("mlist_penalties", mlist_penalties, ofs);
	write_var("cur_f", cur_f, ofs);
	write_var("cur_c", cur_c, ofs);
	write_var("cur_i", cur_i, ofs);
	write_var("magic_offset", magic_offset, ofs);
	write_var("just_box", just_box, ofs);
	write_var("passive", passive, ofs);
	write_var("printed_node", printed_node, ofs);
	write_var("pass_number", pass_number, ofs);
	write_var("no_shrink_error_yet", no_shrink_error_yet, ofs);
	write_var("cur_p", cur_p, ofs);
	write_var("second_pass", second_pass, ofs);
	write_var("final_pass", final_pass, ofs);
	write_var("threshold", threshold, ofs);
	write_var("minimum_demerits", minimum_demerits, ofs);
	write_var("disc_width", disc_width, ofs);
	write_var("easy_line", easy_line, ofs);
	write_var("last_special_line", last_special_line, ofs);
	write_var("first_width", first_width, ofs);
	write_var("second_width", second_width, ofs);
	write_var("first_indent", first_indent, ofs);
	write_var("second_indent", second_indent, ofs);
	write_var("best_bet", best_bet, ofs);
	write_var("fewest_demerits", fewest_demerits, ofs);
	write_var("best_line", best_line, ofs);
	write_var("actual_looseness", actual_looseness, ofs);
	write_var("line_diff", line_diff, ofs);
	write_var("hn", hn, ofs);
	write_var("ha", ha, ofs);
	write_var("hb", hb, ofs);
	write_var("hf", hf, ofs);
	write_var("hyf_char", hyf_char, ofs);
	write_var("cur_lang", cur_lang, ofs);
	write_var("init_cur_lang", init_cur_lang, ofs);
	write_var("l_hyf", l_hyf, ofs);
	write_var("r_hyf", r_hyf, ofs);
	write_var("init_l_hyf", init_l_hyf, ofs);
	write_var("init_r_hyf", init_r_hyf, ofs);
	write_var("hyf_bchar", hyf_bchar, ofs);
	write_var("init_list", init_list, ofs);
	write_var("init_lig", init_lig, ofs);
	write_var("init_lft", init_lft, ofs);
	write_var("hyphen_passed", hyphen_passed, ofs);
	write_var("cur_l", cur_l, ofs);
	write_var("cur_r", cur_r, ofs);
	write_var("cur_q", cur_q, ofs);
	write_var("lig_stack", lig_stack, ofs);
	write_var("ligature_present", ligature_present, ofs);
	write_var("lft_hit", lft_hit, ofs);
	write_var("rt_hit", rt_hit, ofs);
	write_var("hyph_count", hyph_count, ofs);
#ifndef NO_INIT
	write_var("trie_op_ptr", trie_op_ptr, ofs);
	write_var("trie_ptr", trie_ptr, ofs);
	write_var("trie_max", trie_max, ofs);
	write_var("trie_not_ready", trie_not_ready, ofs);
#endif
	write_var("best_height_plus_depth", best_height_plus_depth, ofs);
	write_var("page_tail", page_tail, ofs);
	write_var("page_contents", page_contents, ofs);
	write_var("page_max_depth", page_max_depth, ofs);
	write_var("best_page_break", best_page_break, ofs);
	write_var("least_page_cost", least_page_cost, ofs);
	write_var("best_size", best_size, ofs);
	write_var("last_glue", last_glue, ofs);
	write_var("last_penalty", last_penalty, ofs);
	write_var("last_kern", last_kern, ofs);
	write_var("insert_penalties", insert_penalties, ofs);
	write_var("output_active", output_active, ofs);
	write_var("main_f", main_f, ofs);
	write_var("main_i", main_i, ofs);
	write_var("main_j", main_j, ofs);
	write_var("main_k", main_k, ofs);
	write_var("main_p", main_p, ofs);
	write_var("main_s", main_s, ofs);
	write_var("bchar", bchar, ofs);
	write_var("false_bchar", false_bchar, ofs);
	write_var("cancel_boundary", cancel_boundary, ofs);
	write_var("ins_disc", ins_disc, ofs);
	write_var("cur_box", cur_box, ofs);
	write_var("after_token", after_token, ofs);
	write_var("long_help_seen", long_help_seen, ofs);
	write_var("format_ident", format_ident, ofs);
	write_var("ready_already", ready_already, ofs);
	write_var("write_loc", write_loc, ofs);

#ifndef NO_DEBUG
	write_array(_free, "_free", ofs);
	write_array(was_free, "was_free", ofs);
	write_var("was_mem_end", was_mem_end, ofs);
	write_var("was_lo_max", was_lo_max, ofs);
	write_var("was_hi_min", was_hi_min, ofs);
	write_var("panicking", panicking, ofs);
#endif


}
///////////////////////////////////////////



around line 17327 right after the line 
while (loc < limit&&buffer[loc] == /* */32) incr(loc);
insert
///////////////////////////////////////////
store_tex_data();
///////////////////////////////////////////

